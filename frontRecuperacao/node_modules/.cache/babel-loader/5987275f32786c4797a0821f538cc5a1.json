{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\n\nconst RadioButtonItem = _ref => {\n  let {\n    value,\n    label,\n    style,\n    labelStyle,\n    onPress,\n    disabled,\n    color,\n    uncheckedColor,\n    status,\n    theme: {\n      colors\n    },\n    accessibilityLabel,\n    testID,\n    mode,\n    position = 'trailing'\n  } = _ref;\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    uncheckedColor\n  };\n  const isLeading = position === 'leading';\n  let radioButton;\n\n  if (mode === 'android') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = /*#__PURE__*/React.createElement(RadioButton, radioButtonProps);\n  }\n\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: disabled ? undefined : () => handlePress({\n        onPress: onPress,\n        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n        value\n      }),\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, /*#__PURE__*/React.createElement(Text, {\n      style: [styles.label, {\n        color: colors.text,\n        textAlign: isLeading ? 'right' : 'left'\n      }, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","theme","colors","position","radioButtonProps","uncheckedColor","isLeading","mode","radioButton","context","disabled","handlePress","onPress","onValueChange","value","testID","styles","color","textAlign","withTheme","RadioButtonItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flexShrink","flexGrow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n  position = 'trailing',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                style={[\n                  styles.label,\n                  {\n                    color: colors.text,\n                    textAlign: isLeading ? 'right' : 'left',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}