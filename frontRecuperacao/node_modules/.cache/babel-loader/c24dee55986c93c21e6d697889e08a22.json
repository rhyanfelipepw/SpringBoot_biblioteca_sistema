{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport IconButton from '../../IconButton';\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\nconst StyleContext = /*#__PURE__*/React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {}\n});\n\nconst IconAdornment = _ref => {\n  let {\n    icon,\n    topPosition,\n    side,\n    isTextInputFocused,\n    forceFocus\n  } = _ref;\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET\n  };\n  const contextState = {\n    style,\n    isTextInputFocused,\n    forceFocus\n  };\n  return /*#__PURE__*/React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\n\nconst TextInputIcon = _ref2 => {\n  let {\n    name,\n    onPress,\n    forceTextInputFocus,\n    color,\n    ...rest\n  } = _ref2;\n  const {\n    style,\n    isTextInputFocused,\n    forceFocus\n  } = React.useContext(StyleContext);\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(IconButton, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    color: typeof color === 'function' ? color(isTextInputFocused) : color\n  }, rest)));\n};\n\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon; // @component-docs ignore-next-line\n\nexport { IconAdornment };","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["ICON_SIZE","ICON_OFFSET","StyleContext","style","isTextInputFocused","forceFocus","IconAdornment","top","contextState","TextInputIcon","rest","React","onPressWithFocusControl","forceTextInputFocus","onPress","styles","color","container","position","width","height","justifyContent","alignItems","iconButton","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}