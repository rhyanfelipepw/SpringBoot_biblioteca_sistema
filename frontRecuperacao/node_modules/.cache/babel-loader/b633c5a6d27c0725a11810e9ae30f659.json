{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Animated, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardCover from './CardCover'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Card = _ref => {\n  let {\n    elevation: cardElevation = 1,\n    onLongPress,\n    onPress,\n    mode: cardMode = 'elevated',\n    children,\n    style,\n    theme,\n    testID,\n    accessible,\n    ...rest\n  } = _ref;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(cardElevation));\n  const {\n    animation,\n    dark,\n    mode,\n    roundness\n  } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: {\n        scale\n      }\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);\n  const borderColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation,\n      borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    index,\n    total,\n    siblings\n  }) : child))));\n}; // @component ./CardContent.tsx\n\n\nCard.Content = CardContent; // @component ./CardActions.tsx\n\nCard.Actions = CardActions; // @component ./CardCover.tsx\n\nCard.Cover = CardCover; // @component ./CardTitle.tsx\n\nCard.Title = CardTitle;\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","mode","cardMode","rest","current","React","Animated","roundness","handlePressIn","animation","scale","toValue","duration","useNativeDriver","handlePressOut","total","siblings","child","borderColor","color","theme","borderRadius","styles","onPress","accessible","innerContainer","flexGrow","flexShrink","outlined","borderWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}