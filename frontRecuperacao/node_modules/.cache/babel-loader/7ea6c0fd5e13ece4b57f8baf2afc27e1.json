{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from './helpers';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component {\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      activeUnderlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n    const isAndroid = Platform.OS === 'android';\n    const {\n      colors,\n      fonts\n    } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = StyleSheet.flatten(style) || {};\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n    const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right\n    });\n    let {\n      paddingLeft,\n      paddingRight\n    } = calculateFlatInputHorizontalPadding({\n      adornmentConfig\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal;\n      paddingRight = paddingHorizontal;\n    }\n\n    const {\n      leftLayout,\n      rightLayout\n    } = parentState;\n    const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat\n    });\n    let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness\n    };\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n    const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n    const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid,\n      styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n    };\n    const pad = calculatePadding(paddingSettings);\n    const paddingFlat = adjustPaddingFlat({ ...paddingSettings,\n      pad\n    });\n    const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n    const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n    const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n    const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n    const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n      height: flatHeight,\n      ...paddingFlat,\n      affixHeight: leftLayout.height\n    }) : null;\n    const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n      height: flatHeight,\n      ...paddingFlat,\n      affixHeight: rightLayout.height\n    }) : null;\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: {\n        paddingLeft,\n        paddingRight\n      },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n      roundness: theme.roundness\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange\n    };\n    let adornmentProps = {\n      paddingHorizontal,\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused\n    };\n\n    if (adornmentConfig.length) {\n      adornmentProps = { ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font,\n          fontSize,\n          fontWeight\n        },\n        visible: this.props.parentState.labeled\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(View, {\n      style: [containerStyle, viewStyle]\n    }, /*#__PURE__*/React.createElement(Underline, {\n      parentState: parentState,\n      underlineColorCustom: underlineColorCustom,\n      error: error,\n      colors: colors,\n      activeColor: activeColor\n    }), /*#__PURE__*/React.createElement(View, {\n      style: [styles.labelContainer, {\n        minHeight\n      }]\n    }, !isAndroid && multiline && label &&\n    /*#__PURE__*/\n    // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n    // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n    React.createElement(View, {\n      testID: \"patch-container\",\n      pointerEvents: \"none\",\n      style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n        backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n        left: paddingLeft,\n        right: paddingRight\n      }]\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      parentState: parentState,\n      labelProps: labelProps\n    }), render === null || render === void 0 ? void 0 : render({ ...rest,\n      ref: innerRef,\n      onChangeText,\n      placeholder: label ? parentState.placeholder : this.props.placeholder,\n      placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n      editable: !disabled && editable,\n      selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n      onFocus,\n      onBlur,\n      underlineColorAndroid: 'transparent',\n      multiline,\n      style: [styles.input, {\n        paddingLeft,\n        paddingRight\n      }, !multiline || multiline && height ? {\n        height: flatHeight\n      } : {}, paddingFlat, { ...font,\n        fontSize,\n        fontWeight,\n        color: inputTextColor,\n        textAlignVertical: multiline ? 'top' : 'center',\n        textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n      }, Platform.OS === 'web' && {\n        outline: 'none'\n      }, adornmentStyleAdjustmentForNativeInput]\n    })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n  }\n\n}\n\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default TextInputFlat;\n\nconst Underline = _ref => {\n  let {\n    parentState,\n    error,\n    colors,\n    activeColor,\n    underlineColorCustom\n  } = _ref;\n  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["TextInput","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","React","disabled","error","multiline","editable","render","props","rest","isAndroid","Platform","fonts","font","hasActiveOutline","parentState","fontSize","viewStyle","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","paddingHorizontal","adornmentConfig","getAdornmentConfig","right","paddingRight","calculateFlatInputHorizontalPadding","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","left","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","Flat","inputTextColor","activeColor","color","colors","placeholderColor","underlineColorCustom","activeUnderlineColor","errorColor","underlineColor","containerStyle","backgroundColor","theme","borderTopLeftRadius","borderTopRightRadius","roundness","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","AdornmentType","isTextInputFocused","focused","textStyle","fontWeight","visible","labeled","ref","placeholder","placeholderTextColor","selectionColor","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Underline","transform","scaleY","position","underline","bottom","zIndex","labelContainer","paddingTop","paddingBottom","input","flexGrow","margin","inputFlat","inputFlatDense","patchContainer","densePatchContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      activeUnderlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const isAndroid = Platform.OS === 'android';\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        paddingHorizontal,\n        inputOffset: FLAT_INPUT_OFFSET,\n        mode: InputMode.Flat,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error\n        ? colors.error\n        : activeUnderlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid,\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : null;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : null;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n      roundness: theme.roundness,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      paddingHorizontal,\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              minHeight,\n            },\n          ]}\n        >\n          {!isAndroid && multiline && label && (\n            // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n            // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n            <View\n              testID=\"patch-container\"\n              pointerEvents=\"none\"\n              style={[\n                StyleSheet.absoluteFill,\n                dense ? styles.densePatchContainer : styles.patchContainer,\n                {\n                  backgroundColor:\n                    viewStyle.backgroundColor || containerStyle.backgroundColor,\n                  left: paddingLeft,\n                  right: paddingRight,\n                },\n              ]}\n            />\n          )}\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor ?? placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}