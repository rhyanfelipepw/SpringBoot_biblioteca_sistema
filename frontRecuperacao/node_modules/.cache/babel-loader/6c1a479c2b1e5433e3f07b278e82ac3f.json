{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DrawerItem = _ref => {\n  let {\n    icon,\n    label,\n    active,\n    theme,\n    style,\n    onPress,\n    accessibilityLabel,\n    right,\n    ...rest\n  } = _ref;\n  const {\n    colors,\n    roundness\n  } = theme;\n  const backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  const contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n  return /*#__PURE__*/React.createElement(View, rest, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor,\n      borderRadius: roundness\n    }, style] // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.wrapper\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.content\n  }, icon ? /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, {\n      color: contentColor,\n      ...font,\n      marginLeft: labelMargin\n    }]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","rest","roundness","backgroundColor","active","color","colors","contentColor","font","theme","labelMargin","icon","styles","borderRadius","selected","accessibilityLabel","wrapper","content","marginLeft","right","container","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","label","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}