{"ast":null,"code":"import * as React from 'react';\nimport { AccessibilityInfo, Appearance } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\nconst Provider = _ref => {\n  let { ...props\n  } = _ref;\n  const colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState(false);\n  const [colorScheme, setColorScheme] = React.useState(colorSchemeName);\n\n  const handleAppearanceChange = preferences => {\n    const {\n      colorScheme\n    } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription;\n\n    if (!props.theme) {\n      subscription = AccessibilityInfo.addEventListener('reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return () => {\n      if (!props.theme) {\n        var _subscription;\n\n        if ((_subscription = subscription) !== null && _subscription !== void 0 && _subscription.remove) {\n          subscription.remove();\n        } else {\n          AccessibilityInfo.removeEventListener('reduceMotionChanged', setReduceMotionEnabled);\n        }\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(() => {\n    let appearanceSubscription;\n\n    if (!props.theme) {\n      appearanceSubscription = Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    }\n\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const {\n      theme: providedTheme\n    } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return { ...theme,\n        animation: { ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1\n        }\n      };\n    }\n  };\n\n  const {\n    children,\n    settings\n  } = props;\n  return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","props","colorSchemeName","Appearance","React","handleAppearanceChange","preferences","colorScheme","setColorScheme","subscription","AccessibilityInfo","appearanceSubscription","getTheme","theme","providedTheme","animation","scale","reduceMotionEnabled","settings","icon","MaterialCommunityIcon"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,iBAAA,EAAA,UAAA,QAAA,cAAA;AAMA,SAAA,aAAA,QAAA,WAAA;AACA,SAASA,QAAQ,IAAjB,gBAAA,QAAA,YAAA;AACA,OAAA,qBAAA,MAAA,qCAAA;AACA,OAAA,UAAA,MAAA,iCAAA;AACA,OAAA,YAAA,MAAA,wBAAA;AACA,OAAA,SAAA,MAAA,qBAAA;;AAQA,MAAMA,QAAQ,GAAG,QAAyB;AAAA,MAAxB,EAAE,GAAGC;AAAL,GAAwB;AACxC,QAAMC,eAAe,GAClB,CAACD,KAAK,CAAN,KAAA,KAAgBE,UAAhB,KAAA,IAAgBA,IAAAA,UAAhB,KAAA,KAAA,CAAgBA,GAAhB,KAAA,CAAgBA,GAAAA,UAAU,CAA3B,cAAiBA,EAAhB,KADH,OAAA;AAGA,QAAM,CAAA,mBAAA,EAAA,sBAAA,IAAgDC,KAAK,CAALA,QAAAA,CAAtD,KAAsDA,CAAtD;AAGA,QAAM,CAAA,WAAA,EAAA,cAAA,IAAgCA,KAAK,CAALA,QAAAA,CAAtC,eAAsCA,CAAtC;;AAIA,QAAMC,sBAAsB,GAC1BC,WAD6B,IAE1B;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAN,WAAA;AACAC,IAAAA,cAAc,CAAdA,WAAc,CAAdA;AAJF,GAAA;;AAOAJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAA,YAAA;;AAEA,QAAI,CAACH,KAAK,CAAV,KAAA,EAAkB;AAChBQ,MAAAA,YAAY,GAAGC,iBAAiB,CAAjBA,gBAAAA,CAAAA,qBAAAA,EAAfD,sBAAeC,CAAfD;AAID;;AACD,WAAO,MAAM;AACX,UAAI,CAACR,KAAK,CAAV,KAAA,EAAkB;AAAA,YAAA,aAAA;;AAChB,YAAA,CAAA,aAAA,GAAA,YAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,IAAIQ,aAAAA,CAAJ,MAAA,EAA0B;AACxBA,UAAAA,YAAY,CAAZA,MAAAA;AADF,SAAA,MAEO;AACLC,UAAAA,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,EAAAA,sBAAAA;AAID;AACF;AAVH,KAAA;AATFN,GAAAA,EAqBG,CAACH,KAAK,CArBTG,KAqBG,CArBHA;AAuBAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAA,sBAAA;;AACA,QAAI,CAACH,KAAK,CAAV,KAAA,EAAkB;AAChBU,MAAAA,sBAAsB,GAAGR,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAVA,iBAAAA,CAAzBQ,sBAAyBR,CAAzBQ;AAGD;;AACD,WAAO,MAAM;AACX,UAAI,CAACV,KAAK,CAAV,KAAA,EAAkB;AAChB,YAAA,sBAAA,EAA4B;AAC1BU,UAAAA,sBAAsB,CAAtBA,MAAAA;AADF,SAAA,MAEO;AACLR,UAAAA,UAAU,KAAVA,IAAAA,IAAAA,UAAU,KAAA,KAAVA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAVA,oBAAAA,CAAAA,sBAAAA,CAAAA;AACD;AACF;AAPH,KAAA;AAPFC,GAAAA,EAgBG,CAACH,KAAK,CAhBTG,KAgBG,CAhBHA;;AAkBA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,UAAM;AAAEC,MAAAA,KAAK,EAAEC;AAAT,QAAN,KAAA;;AAEA,QAAA,aAAA,EAAmB;AACjB,aAAA,aAAA;AADF,KAAA,MAEO;AACL,YAAMD,KAAK,GAAIN,WAAW,KAAXA,MAAAA,GAAAA,SAAAA,GAAf,YAAA;AAIA,aAAO,EACL,GADK,KAAA;AAELQ,QAAAA,SAAS,EAAE,EACT,GAAGF,KAAK,CADC,SAAA;AAETG,UAAAA,KAAK,EAAEC,mBAAmB,GAAA,CAAA,GAAO;AAFxB;AAFN,OAAP;AAOD;AAjBH,GAAA;;AAoBA,QAAM;AAAA,IAAA,QAAA;AAAYC,IAAAA;AAAZ,MAAN,KAAA;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,IAAA,KAAK,EAAEA,QAAQ,IAAI;AAAEC,MAAAA,IAAI,EAAEC;AAAR;AAArC,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,IAAA,KAAK,EAAER,QAAQ;AAA9B,GAAA,EAHN,QAGM,CADF,CADF,CADF;AAhFF,CAAA;;AAyFA,eAAA,QAAA","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          AccessibilityInfo.removeEventListener(\n            'reduceMotionChanged',\n            setReduceMotionEnabled\n          );\n        }\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    let appearanceSubscription: NativeEventSubscription | undefined;\n    if (!props.theme) {\n      appearanceSubscription = Appearance?.addChangeListener(\n        handleAppearanceChange\n      ) as NativeEventSubscription | undefined;\n    }\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance?.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}